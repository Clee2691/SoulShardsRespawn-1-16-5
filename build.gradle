buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
    // id "com.matthewprenger.cursegradle" version "1.4.0"
    // id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'


def build_number = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : 'CUSTOM'
version = "${mc_version}-${mod_version}-${build_number}"
group = "mcp.mobius.waila"
archivesBaseName = "SoulShardsRespawn-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "official", version: "1.16.5"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'username', 'SoulShards'

            mods {
                waila {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                waila {
                    source sourceSets.main
                }
            }
        }
    }
}

//processResources {
//     inputs.property "version", project.version
//
//     from(sourceSets.main.resources.srcDirs) {
//
//         include 'META-INF/mods.toml'
//
//         expand 'version': project.version
//     }
//     from(sourceSets.main.resources.srcDirs) {
//         exclude 'META-INF/mods.toml'
//     }
//}

repositories {
    maven { url "https://tehnut.info/maven" }
	maven { url "https://bai.jfrog.io/artifactory/maven" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // compile against the API
    compileOnly fg.deobf("mcp.mobius.waila:wthit-api:forge-2.10.9")

    // run against the full jar
    runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-2.10.9")
}

// Combine main and API source sets
jar {
    from sourceSets.main.output
    manifest {
        attributes(["Specification-Title": project.version,
                    "Specification-Vendor": "Steeldrgn",
                    "Specification-Version": "2", // We are version 1 of ourselves
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"Steeldrgn",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

// API jar
task apiJar(type: Jar) {
    classifier = 'api'
    include 'info/tehnut/soulshardsrespawn/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

tasks.build.dependsOn apiJar, sourcesJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

/*
publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

String getChangelogText() {
    def changelogFile = new File('changelog.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}

curseforge {
    if (project.hasProperty('curse_key_TehNut'))
        apiKey = project.curse_key_TehNut

    project {
        id = "${curse_id}"
        changelog = getChangelogText()
        releaseType = 'release'

        addGameVersion "Forge"

        addGameVersion "1.15"
        addGameVersion "1.15.1"
        addGameVersion "1.15.2"

        addArtifact sourcesJar
        addArtifact apiJar
    }
}
*/